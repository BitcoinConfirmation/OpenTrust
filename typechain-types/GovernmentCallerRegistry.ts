/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GovernmentCallerRegistryInterface extends utils.Interface {
  functions: {
    "agencyToPhone(address)": FunctionFragment;
    "getAgencyNameByPhone(string)": FunctionFragment;
    "getAgencyPhone(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "phoneToAgencyName(string)": FunctionFragment;
    "registerPhoneNumber(address,string,string)": FunctionFragment;
    "revokePhoneNumber(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyAgencyPhone(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "agencyToPhone"
      | "getAgencyNameByPhone"
      | "getAgencyPhone"
      | "owner"
      | "phoneToAgencyName"
      | "registerPhoneNumber"
      | "revokePhoneNumber"
      | "transferOwnership"
      | "verifyAgencyPhone"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "agencyToPhone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgencyNameByPhone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgencyPhone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phoneToAgencyName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPhoneNumber",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePhoneNumber",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAgencyPhone",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "agencyToPhone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgencyNameByPhone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgencyPhone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "phoneToAgencyName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPhoneNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePhoneNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAgencyPhone",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PhoneNumberRegistered(address,string,string)": EventFragment;
    "PhoneNumberRevoked(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhoneNumberRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhoneNumberRevoked"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PhoneNumberRegisteredEventObject {
  agency: string;
  phoneNumber: string;
  agencyName: string;
}
export type PhoneNumberRegisteredEvent = TypedEvent<
  [string, string, string],
  PhoneNumberRegisteredEventObject
>;

export type PhoneNumberRegisteredEventFilter =
  TypedEventFilter<PhoneNumberRegisteredEvent>;

export interface PhoneNumberRevokedEventObject {
  agency: string;
  phoneNumber: string;
}
export type PhoneNumberRevokedEvent = TypedEvent<
  [string, string],
  PhoneNumberRevokedEventObject
>;

export type PhoneNumberRevokedEventFilter =
  TypedEventFilter<PhoneNumberRevokedEvent>;

export interface GovernmentCallerRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernmentCallerRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agencyToPhone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAgencyNameByPhone(
      phoneNumber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAgencyPhone(
      agency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    phoneToAgencyName(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerPhoneNumber(
      agency: PromiseOrValue<string>,
      phoneNumber: PromiseOrValue<string>,
      agencyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokePhoneNumber(
      agency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyAgencyPhone(
      agency: PromiseOrValue<string>,
      phoneNumber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  agencyToPhone(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAgencyNameByPhone(
    phoneNumber: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAgencyPhone(
    agency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  phoneToAgencyName(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerPhoneNumber(
    agency: PromiseOrValue<string>,
    phoneNumber: PromiseOrValue<string>,
    agencyName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokePhoneNumber(
    agency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyAgencyPhone(
    agency: PromiseOrValue<string>,
    phoneNumber: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    agencyToPhone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAgencyNameByPhone(
      phoneNumber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAgencyPhone(
      agency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    phoneToAgencyName(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerPhoneNumber(
      agency: PromiseOrValue<string>,
      phoneNumber: PromiseOrValue<string>,
      agencyName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePhoneNumber(
      agency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyAgencyPhone(
      agency: PromiseOrValue<string>,
      phoneNumber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PhoneNumberRegistered(address,string,string)"(
      agency?: PromiseOrValue<string> | null,
      phoneNumber?: null,
      agencyName?: null
    ): PhoneNumberRegisteredEventFilter;
    PhoneNumberRegistered(
      agency?: PromiseOrValue<string> | null,
      phoneNumber?: null,
      agencyName?: null
    ): PhoneNumberRegisteredEventFilter;

    "PhoneNumberRevoked(address,string)"(
      agency?: PromiseOrValue<string> | null,
      phoneNumber?: null
    ): PhoneNumberRevokedEventFilter;
    PhoneNumberRevoked(
      agency?: PromiseOrValue<string> | null,
      phoneNumber?: null
    ): PhoneNumberRevokedEventFilter;
  };

  estimateGas: {
    agencyToPhone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgencyNameByPhone(
      phoneNumber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgencyPhone(
      agency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    phoneToAgencyName(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPhoneNumber(
      agency: PromiseOrValue<string>,
      phoneNumber: PromiseOrValue<string>,
      agencyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokePhoneNumber(
      agency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyAgencyPhone(
      agency: PromiseOrValue<string>,
      phoneNumber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agencyToPhone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgencyNameByPhone(
      phoneNumber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgencyPhone(
      agency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    phoneToAgencyName(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPhoneNumber(
      agency: PromiseOrValue<string>,
      phoneNumber: PromiseOrValue<string>,
      agencyName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokePhoneNumber(
      agency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyAgencyPhone(
      agency: PromiseOrValue<string>,
      phoneNumber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
